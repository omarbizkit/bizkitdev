name: Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test and Quality Checks

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test

      - name: Run contract tests
        run: npm run test:contract
        env:
          TEST_BASE_URL: http://localhost:4321
          PUBLIC_SUPABASE_URL: https://mock.supabase.co
          PUBLIC_SUPABASE_ANON_KEY: mock-anon-key-safe-for-ci

      - name: Install Playwright dependencies
        run: npx playwright install --with-deps chromium

      - name: Start development server
        run: |
          npm run dev &
          sleep 10
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:4321
        env:
          PUBLIC_SUPABASE_URL: https://mock.supabase.co
          PUBLIC_SUPABASE_ANON_KEY: mock-anon-key-safe-for-ci

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results
          path: test-results/

  build:
    runs-on: ubuntu-latest
    needs: test
    name: Build Application

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL || 'https://mock.supabase.co' }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PUBLIC_SUPABASE_ANON_KEY || 'mock-anon-key-safe-for-ci' }}
          PUBLIC_SITE_URL: ${{ vars.PUBLIC_SITE_URL || 'https://bizkit.dev' }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  docker:
    runs-on: ubuntu-latest
    needs: [test, build]
    name: Build and Push Docker Image
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PUBLIC_SUPABASE_URL=${{ secrets.PUBLIC_SUPABASE_URL || 'https://mock.supabase.co' }}
            PUBLIC_SUPABASE_ANON_KEY=${{ secrets.PUBLIC_SUPABASE_ANON_KEY || 'mock-anon-key-safe-for-ci' }}
            PUBLIC_SITE_URL=${{ vars.PUBLIC_SITE_URL || 'https://bizkit.dev' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    name: Deploy to Production
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deployment would happen here"
          echo "This could involve:"
          echo "- SSH to production server"
          echo "- Pull latest Docker image"
          echo "- Update docker-compose.yml"
          echo "- Run docker-compose up -d"
          echo "- Perform health checks"
        # Actual deployment commands would go here
        # For example, if deploying to a VPS:
        # - name: Deploy to VPS
        #   uses: appleboy/ssh-action@v1.0.0
        #   with:
        #     host: ${{ secrets.HOST }}
        #     username: ${{ secrets.USERNAME }}
        #     key: ${{ secrets.KEY }}
        #     script: |
        #       cd /path/to/app
        #       docker-compose pull
        #       docker-compose up -d

  security:
    runs-on: ubuntu-latest
    name: Security Scan
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit

      - name: Run dependency check
        uses: actions/dependency-review-action@v4

  lighthouse:
    runs-on: ubuntu-latest
    needs: build
    name: Lighthouse Performance Audit

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Start preview server
        run: |
          npm run preview &
          sleep 10
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:4321
        env:
          PUBLIC_SUPABASE_URL: https://mock.supabase.co
          PUBLIC_SUPABASE_ANON_KEY: mock-anon-key-safe-for-ci

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:4321
            http://localhost:4321/about
            http://localhost:4321/work
          configPath: ./.lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    name: Deployment Notification
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Deployment Success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "Site is live at: https://bizkit.dev"

      - name: Deployment Failed
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs for details."