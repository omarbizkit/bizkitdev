---
export interface Props {
  title?: string;
  subtitle?: string;
  description?: string;
}

const { 
  title = "The Mind Behind The Code", 
  subtitle = "Data & AI Enthusiast", 
  description = "Transforming complex data into intelligent solutions that drive real-world impact." 
} = Astro.props;
---

<section class="min-h-screen flex items-center justify-center relative overflow-hidden">
  <!-- Animated background elements -->
  <div class="absolute inset-0 z-0">
    <div class="absolute top-1/4 left-1/4 w-96 h-96 bg-cyan-500/10 rounded-full blur-3xl animate-pulse"></div>
    <div class="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse delay-1000"></div>
  </div>
  
  <div class="relative z-10 max-w-6xl mx-auto px-6 text-center">
    <!-- Main heading with gradient effect -->
    <h1 class="text-5xl md:text-7xl font-bold mb-6 leading-tight">
      <span class="bg-gradient-to-r from-cyan-400 via-purple-500 to-pink-500 bg-clip-text text-transparent">
        {title}
      </span>
    </h1>
    
    <!-- Subtitle -->
    <p class="text-xl md:text-2xl text-gray-300 mb-8 font-mono">
      {subtitle}
    </p>
    
    <!-- Description -->
    <p class="text-lg text-gray-400 mb-12 max-w-3xl mx-auto leading-relaxed">
      {description}
    </p>
    
    <!-- Newsletter Subscription -->
    <div class="bg-gray-900/50 backdrop-blur-sm border border-gray-700 rounded-2xl p-6 md:p-8 mt-12 max-w-md mx-auto">
      <div class="text-center mb-5 md:mb-6">
        <h3 class="text-lg md:text-xl font-semibold text-white mb-2">Stay Updated</h3>
        <p class="text-gray-400 text-sm">Get the latest on my projects and insights delivered to your inbox.</p>
      </div>

      <form data-testid="hero-subscribe-form" id="hero-subscribe-form" class="flex flex-col gap-4">
        <div>
          <label for="hero-email" class="sr-only">Email address for newsletter subscription</label>
          <input
            type="email"
            id="hero-email"
            placeholder="Enter your email address"
            required
            class="input-cyber w-full px-4 py-3 rounded-lg"
            aria-label="Email address for newsletter subscription"
          />
          <div id="hero-email-error" class="text-red-400 text-sm mt-1 hidden">
            Please enter a valid email address
          </div>
        </div>
        <button
          type="submit"
          id="hero-submit-btn"
          class="w-full px-6 py-3 bg-gradient-to-r from-cyan-500 to-purple-600 rounded-lg font-semibold text-white hover:from-cyan-400 hover:to-purple-500 transition-all duration-300 hover:shadow-lg hover:shadow-cyan-500/25 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <span id="hero-button-text">Join My Newsletter</span>
          <span id="hero-loading-spinner" class="inline-block ml-2 w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin hidden"></span>
        </button>
        <div id="hero-message" class="text-sm text-center hidden min-h-[40px] flex items-center justify-center">
          <!-- Success or error messages will be inserted here -->
        </div>
      </form>

      <p class="text-center text-xs text-gray-500 mt-4">
        No spam, unsubscribe anytime.
      </p>
    </div>

    <!-- CTA Buttons -->
    <div class="flex flex-col sm:flex-row gap-4 justify-center items-center mt-8">
      <a href="#projects" class="group relative px-8 py-4 bg-gradient-to-r from-cyan-500 to-purple-600 rounded-lg font-semibold text-white hover:from-cyan-400 hover:to-purple-500 transition-all duration-300 hover:shadow-lg hover:shadow-cyan-500/25">
        View My Work
        <span class="ml-2 group-hover:translate-x-1 transition-transform">→</span>
      </a>

      <a href="#contact" class="group relative px-8 py-4 border-2 border-gray-600 rounded-lg font-semibold text-gray-300 hover:border-cyan-400 hover:text-cyan-400 transition-all duration-300">
        Get In Touch
        <span class="ml-2 group-hover:translate-x-1 transition-transform">→</span>
      </a>
    </div>
    
    <!-- Stats section -->
    <div class="grid grid-cols-3 gap-8 mt-16 max-w-md mx-auto">
      <div class="text-center">
        <div class="text-3xl font-bold text-cyan-400">15+</div>
        <div class="text-sm text-gray-400">Years Experience</div>
      </div>
      <div class="text-center">
        <div class="text-3xl font-bold text-purple-400">20+</div>
        <div class="text-sm text-gray-400">Projects</div>
      </div>
      <div class="text-center">
        <div class="text-3xl font-bold text-pink-400">∞</div>
        <div class="text-sm text-gray-400">Lines of Code</div>
      </div>
    </div>
  </div>
  
  <!-- Scroll indicator -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce">
    <div class="w-6 h-10 border-2 border-gray-400 rounded-full flex justify-center">
      <div class="w-1 h-3 bg-gray-400 rounded-full mt-2"></div>
    </div>
  </div>
</section>

<script>
// Hero newsletter form handling
document.addEventListener('DOMContentLoaded', function() {
  const heroForm = document.getElementById('hero-subscribe-form');
  const emailInput = document.getElementById('hero-email');
  const submitButton = document.getElementById('hero-submit-btn');
  const emailError = document.getElementById('hero-email-error');
  const messageBox = document.getElementById('hero-message');

  if (!heroForm || !emailInput || !submitButton || !emailError || !messageBox) {
    console.error('Hero newsletter form elements not found');
    return;
  }

  // Email validation on input
  emailInput.addEventListener('input', function(e) {
    if (e.target && e.target instanceof HTMLInputElement && e.target.checkValidity()) {
      emailError.classList.add('hidden');
    }
  });

  // Handle form submission
  heroForm.addEventListener('submit', async function(event) {
    event.preventDefault();

    const email = (emailInput as HTMLInputElement).value.trim();

    // Basic validation
    if (!email) {
      showError('Please enter your email address.');
      return;
    }

    if (!(emailInput as HTMLInputElement).checkValidity()) {
      showError('Please enter a valid email address.');
      emailError.classList.remove('hidden');
      return;
    }

    // Clear previous messages
    messageBox.className = 'text-sm text-center hidden min-h-[40px] flex items-center justify-center';

    // Set loading state
    updateButtonState('loading');
    (emailInput as HTMLInputElement).disabled = true;

    try {
      // Make API call to check subscription status
      const response = await fetch('/api/subscribe/check', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email: email })
      });

      const data = await response.json();

      if (response.status === 200 && data.message === 'EMAIL_AVAILABLE') {
        // Email is not subscribed, continue to redirect
        updateButtonState('redirecting');
        window.location.href = `/subscribe?email=${encodeURIComponent(email)}`;
        return;

      } else if (response.status === 409 && data.message === 'ALREADY_SUBSCRIBED') {
        // Email is already subscribed - show success and reset
        showSuccess('You\'re already subscribed! Check your email for updates.');
        updateButtonState('ready');
        (emailInput as HTMLInputElement).disabled = false;
        return;

      } else {
        // Handle other errors
        showError(data.message || 'Something went wrong. Please try again.');
        updateButtonState('ready');
        (emailInput as HTMLInputElement).disabled = false;
        return;
      }

    } catch (error) {
      console.error('Newsletter check error:', error);
      showError('Network error. Please try again later.');
      updateButtonState('ready');
      (emailInput as HTMLInputElement).disabled = false;
    }
  });

  function showSuccess(message: string) {
    messageBox!.className = 'text-sm text-center text-green-400 min-h-[40px] flex items-center justify-center';
    messageBox!.textContent = message;
    emailError!.classList.add('hidden');
  }

  function showError(message: string) {
    messageBox!.className = 'text-sm text-center text-red-400 min-h-[40px] flex items-center justify-center';
    messageBox!.textContent = message;
    emailError!.classList.add('hidden');
  }

  function updateButtonState(state: 'loading' | 'redirecting' | 'ready' | 'idle') {
    const buttonText = document.getElementById('hero-button-text');
    const loadingSpinner = document.getElementById('hero-loading-spinner');

    if (!buttonText || !loadingSpinner) {
      console.error('Button state elements not found');
      return;
    }

    switch (state) {
      case 'loading':
        buttonText.textContent = 'Checking...';
        loadingSpinner.classList.remove('hidden');
        (submitButton as HTMLButtonElement).disabled = true;
        break;
      case 'redirecting':
        buttonText.textContent = 'Redirecting...';
        loadingSpinner.classList.remove('hidden');
        (submitButton as HTMLButtonElement).disabled = true;
        break;
      case 'ready':
      default:
        buttonText.textContent = 'Join My Newsletter';
        loadingSpinner.classList.add('hidden');
        (submitButton as HTMLButtonElement).disabled = false;
        break;
    }
  }
});
</script>

<!-- Analytics tracking for newsletter interactions -->
<script>
// Newsletter analytics tracking
document.addEventListener('DOMContentLoaded', function() {
  // Wait for analytics to be ready
  function initializeNewsletterTracking() {
    if (!window.analytics?.trackNewsletterInteraction) {
      // Analytics not ready yet, try again in 100ms
      setTimeout(initializeNewsletterTracking, 100);
      return;
    }

    const heroForm = document.getElementById('hero-subscribe-form');
    const emailInput = document.getElementById('hero-email');
    const submitButton = document.getElementById('hero-submit-btn');
    const viewWorkBtn = document.querySelector('a[href="#projects"]');
    const contactBtn = document.querySelector('a[href="#contact"]');

    if (!heroForm || !emailInput || !submitButton) {
      console.error('Newsletter form elements not found for analytics');
      return;
    }

    // Track newsletter form view when it becomes visible
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          window.analytics.trackNewsletterInteraction('form_view', {
            source: 'hero_section',
            formType: 'newsletter_signup',
            viewportPosition: Math.round(entry.boundingClientRect.top)
          });
          // Only track once per page load
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.5 });

    observer.observe(heroForm);

    // Track email input focus and engagement
    let inputFocused = false;
    emailInput.addEventListener('focus', () => {
      if (!inputFocused) {
        window.analytics.trackNewsletterInteraction('email_input_focus', {
          source: 'hero_section',
          timestamp: Date.now()
        });
        inputFocused = true;
      }
    });

    // Track email input validation events
    emailInput.addEventListener('input', (e) => {
      const email = e.target.value.trim();

      // Track when user starts typing (first character)
      if (email.length === 1) {
        window.analytics.trackNewsletterInteraction('email_typing_start', {
          source: 'hero_section'
        });
      }

      // Track when valid email is entered
      if (email.includes('@') && email.includes('.') && e.target.checkValidity()) {
        window.analytics.trackNewsletterInteraction('valid_email_entered', {
          source: 'hero_section',
          emailDomain: email.split('@')[1]
        });
      }
    });

    // Track form submission attempts and outcomes
    const originalFormHandler = heroForm.onsubmit;
    heroForm.addEventListener('submit', (e) => {
      const email = emailInput.value.trim();

      window.analytics.trackNewsletterInteraction('form_submit_attempt', {
        source: 'hero_section',
        email: email,
        emailDomain: email.includes('@') ? email.split('@')[1] : null,
        timestamp: Date.now()
      });
    });

    // Override success/error handlers to track outcomes
    const originalShowSuccess = window.showSuccess;
    const originalShowError = window.showError;

    // Track successful subscription flow
    const originalFetch = window.fetch;
    window.fetch = async function(...args) {
      const result = await originalFetch.apply(this, args);

      // Track newsletter API responses
      if (args[0] === '/api/subscribe/check') {
        const clonedResponse = result.clone();
        try {
          const data = await clonedResponse.json();
          const email = emailInput.value.trim();

          if (result.status === 200 && data.message === 'EMAIL_AVAILABLE') {
            window.analytics.trackNewsletterInteraction('email_check_available', {
              source: 'hero_section',
              email: email,
              emailDomain: email.includes('@') ? email.split('@')[1] : null,
              redirecting: true
            });
          } else if (result.status === 409 && data.message === 'ALREADY_SUBSCRIBED') {
            window.analytics.trackNewsletterInteraction('email_already_subscribed', {
              source: 'hero_section',
              email: email,
              emailDomain: email.includes('@') ? email.split('@')[1] : null
            });
          } else {
            window.analytics.trackNewsletterInteraction('email_check_error', {
              source: 'hero_section',
              email: email,
              error: data.message || 'Unknown error',
              statusCode: result.status
            });
          }
        } catch (error) {
          window.analytics.trackNewsletterInteraction('email_check_parse_error', {
            source: 'hero_section',
            error: error.message
          });
        }
      }

      return result;
    };

    // Track CTA button clicks
    if (viewWorkBtn) {
      viewWorkBtn.addEventListener('click', (e) => {
        window.analytics.trackNewsletterInteraction('cta_view_work_click', {
          source: 'hero_section',
          destination: e.target.href
        });

        // Also track as navigation click
        if (window.analytics.trackNavigationClick) {
          window.analytics.trackNavigationClick(e.target.href, false, {
            source: 'hero_cta',
            buttonType: 'view_work'
          });
        }
      });
    }

    if (contactBtn) {
      contactBtn.addEventListener('click', (e) => {
        window.analytics.trackNewsletterInteraction('cta_contact_click', {
          source: 'hero_section',
          destination: e.target.href
        });

        // Also track as navigation click
        if (window.analytics.trackNavigationClick) {
          window.analytics.trackNavigationClick(e.target.href, false, {
            source: 'hero_cta',
            buttonType: 'contact'
          });
        }
      });
    }

    // Track newsletter section engagement time
    let engagementStartTime = Date.now();
    let hasTrackedEngagement = false;

    document.addEventListener('visibilitychange', () => {
      if (document.hidden && !hasTrackedEngagement) {
        const engagementTime = Date.now() - engagementStartTime;
        if (engagementTime > 5000) { // 5+ seconds engagement
          window.analytics.trackNewsletterInteraction('section_engagement', {
            source: 'hero_section',
            engagementTime: engagementTime,
            timestamp: Date.now()
          });
          hasTrackedEngagement = true;
        }
      }
    });

    console.log('[Analytics] Newsletter tracking initialized for hero section');
  }

  // Initialize tracking when DOM is ready
  initializeNewsletterTracking();

  // Also listen for analytics ready event
  window.addEventListener('analyticsReady', initializeNewsletterTracking);
});
</script>

<style>
  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-20px); }
  }
  
  .animate-float {
    animation: float 6s ease-in-out infinite;
  }
</style>