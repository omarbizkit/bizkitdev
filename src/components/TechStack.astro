---
export interface Props {
  techStack: string[];
  limit?: number;
  showNames?: boolean;
}

const { techStack, limit, showNames = false } = Astro.props;
const displayTechs = limit ? techStack.slice(0, limit) : techStack;
const remainingCount = limit && techStack.length > limit ? techStack.length - limit : 0;

const getTechIcon = (tech: string) => {
  const techLower = tech.toLowerCase();
  
  const iconMap: Record<string, string> = {
    // Languages
    'python': '🐍',
    'javascript': '🟨',
    'typescript': '🔷',
    'java': '☕',
    'c++': '⚡',
    'rust': '🦀',
    'go': '🐹',
    'php': '🐘',
    'ruby': '💎',
    'swift': '🐦',
    'kotlin': '🎯',
    
    // Frameworks & Libraries
    'react': '⚛️',
    'vue': '💚',
    'angular': '🅰️',
    'svelte': '🧡',
    'astro': '🚀',
    'next.js': '▲',
    'nextjs': '▲',
    'nuxt': '💚',
    'express': '🟢',
    'fastapi': '⚡',
    'flask': '🌶️',
    'django': '🎸',
    'spring': '🌱',
    'laravel': '🎭',
    'rails': '🚂',
    
    // AI/ML
    'tensorflow': '🧠',
    'pytorch': '🔥',
    'scikit-learn': '📊',
    'pandas': '🐼',
    'numpy': '🔢',
    'opencv': '👁️',
    'transformers': '🤖',
    'spacy': '📝',
    'mlflow': '🔄',
    
    // Databases
    'postgresql': '🐘',
    'mongodb': '🍃',
    'redis': '🔴',
    'mysql': '🐬',
    'sqlite': '📦',
    'influxdb': '📈',
    
    // Cloud & DevOps
    'docker': '🐳',
    'kubernetes': '☸️',
    'aws': '☁️',
    'azure': '☁️',
    'gcp': '☁️',
    'aws iot': '📡',
    'nginx': '🔧',
    
    // Tools & Platforms
    'git': '📋',
    'webpack': '📦',
    'vite': '⚡',
    'node.js': '🟢',
    'nodejs': '🟢',
    'websocket': '🔌',
    'rest api': '🌐',
    'graphql': '🔗',
    'mqtt': '📡',
    'webassembly': '⚙️',
    
    // Hardware & IoT
    'arduino': '🔌',
    'raspberry pi': '🥧',
    'nvidia': '💚',
    'cuda': '🚀',
    
    // Blockchain
    'ethereum': '💎',
    'web3': '🌐',
    'blockchain': '⛓️',
    
    // Data & Analytics
    'chart.js': '📊',
    'd3.js': '📈',
    'grafana': '📊',
    'prometheus': '🔍',
    
    // Testing
    'jest': '🃏',
    'cypress': '🌲',
    'playwright': '🎭',
    'vitest': '⚡',
    
    // Other
    'cmake': '🔨',
    'openmp': '🔄',
    'three.js': '🎮',
    'tailwind': '💨',
    'sass': '🎨',
    'linear algebra': '📐',
    'complex numbers': '🔢'
  };
  
  // Try exact match first
  if (iconMap[techLower]) {
    return iconMap[techLower];
  }
  
  // Try partial matches for compound names
  for (const [key, icon] of Object.entries(iconMap)) {
    if (techLower.includes(key) || key.includes(techLower)) {
      return icon;
    }
  }
  
  // Default icon for unknown tech
  return '⚙️';
};
---

<div class="flex flex-wrap items-center gap-2" role="list" aria-label="Technologies used">
  {displayTechs.map((tech) => (
    <div 
      class={`inline-flex items-center gap-1.5 px-2 py-1 rounded-md text-sm font-medium bg-gray-800/50 border border-gray-700/50 text-gray-300 hover:border-cyan-400/50 transition-colors ${showNames ? '' : 'tooltip-container'}`}
      role="listitem"
      title={showNames ? undefined : tech}
    >
      <span class="text-base" aria-hidden="true">{getTechIcon(tech)}</span>
      {showNames && <span>{tech}</span>}
      {!showNames && (
        <span class="sr-only">{tech}</span>
      )}
    </div>
  ))}
  {remainingCount > 0 && (
    <div 
      class="inline-flex items-center gap-1.5 px-2 py-1 rounded-md text-sm font-medium bg-gray-700/50 border border-gray-600/50 text-gray-400"
      title={`${remainingCount} more technologies`}
    >
      <span>+{remainingCount}</span>
    </div>
  )}
</div>

<style>
.tooltip-container {
  position: relative;
}

.tooltip-container:hover::after {
  content: attr(title);
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  padding: 0.5rem 0.75rem;
  background: rgb(17 24 39);
  border: 1px solid rgb(75 85 99);
  border-radius: 0.375rem;
  font-size: 0.875rem;
  white-space: nowrap;
  z-index: 50;
  opacity: 1;
  pointer-events: none;
  margin-bottom: 0.25rem;
}

.tooltip-container::after {
  content: '';
  opacity: 0;
  transition: opacity 0.2s;
}
</style>