---
import StructuredData from './StructuredData.astro';

interface Props {
  title?: string;
  description?: string;
  image?: string;
}

const {
  title = 'Omar Torres | Data & AI Enthusiast',
  description = 'The Mind Behind The Code - Portfolio showcasing innovative data science, machine learning, and AI projects.',
  image = '/og-image.jpg'
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="generator" content={Astro.generator} />

<!-- Accessibility Meta Tags -->
<meta name="theme-color" content="#00ffff" />
<meta name="color-scheme" content="dark light" />
<meta name="referrer" content="strict-origin-when-cross-origin" />

<!-- Core SEO -->
<title>{title}</title>
<meta name="description" content={description} />
<meta name="author" content="Omar Torres" />
<meta name="keywords" content="Omar Torres, Data Science, AI, Machine Learning, Portfolio, Web Development" />
<link rel="canonical" href={canonicalURL} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- Fonts -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet" />

<!-- Favicon -->
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />

<style is:inline>
  :root {
    --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    --font-mono: 'JetBrains Mono', 'Consolas', 'Monaco', 'Courier New', monospace;
    
    /* Accessibility color scheme variables */
    --focus-color: #00ffff;
    --focus-outline-width: 2px;
    --focus-outline-offset: 2px;
  }
  
  /* Respect user preferences for reduced motion */
  @media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }
  
  /* High contrast mode adjustments */
  @media (prefers-contrast: high) {
    :root {
      --focus-outline-width: 3px;
      --focus-outline-offset: 3px;
    }
  }
  
  * {
    box-sizing: border-box;
  }
  
  html {
    font-family: var(--font-sans);
    line-height: 1.6;
    scroll-behavior: smooth;
  }
  
  /* Respect user's reduced motion preference for scroll behavior */
  @media (prefers-reduced-motion: reduce) {
    html {
      scroll-behavior: auto;
    }
  }
  
  body {
    margin: 0;
    padding: 0;
  }
  
  /* Global focus styles for accessibility */
  *:focus-visible {
    outline: var(--focus-outline-width) solid var(--focus-color);
    outline-offset: var(--focus-outline-offset);
    border-radius: 4px;
  }
  
  /* Screen reader only content */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  
  /* Show screen reader content when focused */
  .sr-only:focus {
    position: static;
    width: auto;
    height: auto;
    padding: 0.5rem;
    margin: 0;
    overflow: visible;
    clip: auto;
    white-space: normal;
    background: #000;
    color: var(--focus-color);
    border: 2px solid var(--focus-color);
    border-radius: 4px;
    z-index: 1000;
  }
  
  /* Main content focus styles */
  main:focus {
    outline: none;
  }
  
  /* Button and interactive element base styles */
  button, 
  [role="button"],
  input,
  select,
  textarea {
    font-family: inherit;
  }
  
  /* Improve text readability */
  p, li, h1, h2, h3, h4, h5, h6 {
    word-wrap: break-word;
    hyphens: auto;
  }
  
  /* Large text preference support */
  @media (prefers-reduced-data: reduce) {
    * {
      animation: none !important;
      transition: none !important;
    }
  }
</style>

<!-- Structured Data for SEO -->
<StructuredData type="portfolio" />

<!-- Analytics Initialization -->
<script type="module">
  import { initializeAnalytics } from '/src/lib/analytics/init.ts';
  import { getCurrentConsent } from '/src/lib/analytics/consent.ts';

  // Initialize analytics system on page load
  document.addEventListener('DOMContentLoaded', async function() {
    try {
      // Get current consent level from cookies or localStorage
      const currentConsent = getCurrentConsent();
      const consentLevel = currentConsent ? currentConsent.level : 'none';

      // Determine environment
      const environment = window.location.hostname === 'localhost' ? 'development' :
                         window.location.hostname.includes('staging') ? 'staging' : 'production';

      // Generate session ID
      const sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);

      // Analytics configuration
      const analyticsConfig = {
        consentLevel: consentLevel,
        environment: environment,
        enableDebug: environment === 'development',
        providers: {
          ga4: true,
          sentry: true,
          performance: true
        },
        privacyMode: consentLevel === 'none' || consentLevel === 'essential',
        sessionId: sessionId
      };

      console.log('[Analytics] Initializing analytics system...', {
        consentLevel: consentLevel,
        environment: environment,
        sessionId: sessionId
      });

      // Initialize analytics
      const state = await initializeAnalytics(analyticsConfig);

      console.log('[Analytics] Analytics system initialized successfully', {
        initialized: state.initialized,
        providers: state.providers,
        initializationTime: state.initializationTime,
        errors: state.errors
      });

      // Track page view after initialization
      if (window.analytics?.trackPageView && consentLevel !== 'none') {
        window.analytics.trackPageView({
          path: window.location.pathname,
          title: document.title,
          url: window.location.href,
          referrer: document.referrer
        });
      }

    } catch (error) {
      console.error('[Analytics] Failed to initialize analytics system:', error);

      // Track initialization failure if error tracking is available
      if (window.analytics?.trackErrorEvent) {
        window.analytics.trackErrorEvent(error, 'analytics_initialization', {
          source: 'MainHead',
          url: window.location.pathname
        });
      }
    }
  });

  // Listen for consent changes
  window.addEventListener('consentChanged', async (event) => {
    try {
      console.log('[Analytics] Consent changed, reinitializing...', event.detail);

      const newConsentLevel = event.detail.consentLevel;
      const environment = window.location.hostname === 'localhost' ? 'development' :
                         window.location.hostname.includes('staging') ? 'staging' : 'production';

      const analyticsConfig = {
        consentLevel: newConsentLevel,
        environment: environment,
        enableDebug: environment === 'development',
        providers: {
          ga4: newConsentLevel === 'analytics' || newConsentLevel === 'marketing' || newConsentLevel === 'full',
          sentry: newConsentLevel !== 'none',
          performance: newConsentLevel === 'analytics' || newConsentLevel === 'marketing' || newConsentLevel === 'full'
        },
        privacyMode: newConsentLevel === 'none' || newConsentLevel === 'essential',
        sessionId: window.analytics?.getState?.()?.sessionId || 'session_' + Date.now()
      };

      const state = await initializeAnalytics(analyticsConfig);
      console.log('[Analytics] Analytics reinitilized after consent change', state);

    } catch (error) {
      console.error('[Analytics] Failed to reinitialize analytics after consent change:', error);
    }
  });

  // Handle page visibility changes for performance tracking
  document.addEventListener('visibilitychange', () => {
    if (window.analytics?.trackPerformanceEvent) {
      window.analytics.trackPerformanceEvent('page_visibility_change', Date.now(), {
        hidden: document.hidden,
        visibilityState: document.visibilityState,
        pageTitle: document.title,
        url: window.location.pathname
      });
    }
  });

  // Handle page unload for session tracking
  window.addEventListener('beforeunload', () => {
    if (window.analytics?.trackPerformanceEvent) {
      window.analytics.trackPerformanceEvent('page_unload', Date.now(), {
        sessionDuration: Date.now() - (window.sessionStartTime || Date.now()),
        pageTitle: document.title,
        url: window.location.pathname
      });
    }
  });

  // Set session start time
  window.sessionStartTime = Date.now();
</script>

<!-- Consent Banner Component -->
<script type="module" define:vars={{ pageTitle: title }}>
  // Load and initialize consent banner if not already shown
  document.addEventListener('DOMContentLoaded', function() {
    // Check if consent banner should be shown
    const consentShown = localStorage.getItem('consent_banner_shown');
    const currentConsent = localStorage.getItem('user_consent_level');

    if (!consentShown || !currentConsent) {
      // Import and show consent banner
      import('/src/components/analytics/PrivacyBanner.astro').then(module => {
        // This would need to be implemented as a dynamic component
        console.log('[Analytics] Consent banner would be shown here');
      }).catch(error => {
        console.warn('[Analytics] Failed to load consent banner:', error);
      });
    }
  });
</script>