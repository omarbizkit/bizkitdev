---
import MainHead from '../components/MainHead.astro';
import ThemeToggle from '../components/ThemeToggle.astro';
import PerformanceOptimizations from '../components/PerformanceOptimizations.astro';
import '../styles/theme.css';

interface Props {
  title?: string;
  description?: string;
}

const { title = 'Omar Torres | Data & AI Enthusiast', description = 'The Mind Behind The Code - Portfolio showcasing innovative data science, machine learning, and AI projects.' } = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <MainHead title={title} description={description} />
    <PerformanceOptimizations />
  </head>
  <body class="bg-black text-white font-sans overflow-x-hidden">
    <div class="fixed inset-0 z-0">
      <div class="absolute inset-0 bg-gradient-to-br from-purple-900/10 via-black to-cyan-900/10"></div>
      <div class="absolute inset-0 bg-[radial-gradient(circle_at_25%_25%,rgba(0,255,255,0.1)_0%,transparent_50%)]"></div>
      <div class="absolute inset-0 bg-[radial-gradient(circle_at_75%_75%,rgba(159,64,255,0.1)_0%,transparent_50%)]"></div>
    </div>
    
    <div class="relative z-10 min-h-screen flex flex-col">
      <nav class="fixed top-0 left-0 right-0 z-50 bg-black/80 backdrop-blur-lg border-b border-white/10">
        <div class="max-w-7xl mx-auto px-6 py-4">
          <div class="flex items-center justify-between">
            <a href="/" class="flex items-center space-x-3 group">
              <div class="w-8 h-8 bg-gradient-to-br from-cyan-400 to-purple-500 rounded-lg flex items-center justify-center group-hover:shadow-lg group-hover:shadow-cyan-500/50 transition-shadow">
                <span class="text-black font-bold text-sm">OT</span>
              </div>
              <span class="font-semibold text-lg group-hover:text-cyan-400 transition-colors">Omar Torres</span>
            </a>
            
            <div class="hidden md:flex items-center space-x-8">
              <a href="/#projects" class="text-gray-300 hover:text-cyan-400 transition-colors">Projects</a>
              <a href="/about/" class="text-gray-300 hover:text-cyan-400 transition-colors">About</a>
              <a href="/subscribe" class="text-gray-300 hover:text-cyan-400 transition-colors">Subscribe</a>
              <a href="/#contact" class="text-gray-300 hover:text-cyan-400 transition-colors">Contact</a>
            </div>
          </div>
        </div>
      </nav>
      
      <ThemeToggle />
      
      <main class="flex-1">
        <slot />
      </main>
      
      <footer class="border-t border-white/10 py-12">
        <div class="max-w-7xl mx-auto px-6 text-center">
          <p class="text-gray-400">&copy; 2025 Omar Torres. The Mind Behind The Code.</p>
        </div>
      </footer>
    </div>
  </body>
</html>

<!-- Performance monitoring for Core Web Vitals -->
<script define:vars={{ pageTitle: title, pageDescription: description }}>
// Performance monitoring for layout
document.addEventListener('DOMContentLoaded', function() {
  // Wait for analytics to be ready
  function initializePerformanceMonitoring() {
    if (!window.analytics?.trackPerformanceEvent) {
      // Analytics not ready yet, try again in 100ms
      setTimeout(initializePerformanceMonitoring, 100);
      return;
    }

    // Track page load performance
    const startTime = performance.now();
    let pageLoadTracked = false;

    // Track when page is fully loaded
    window.addEventListener('load', () => {
      if (!pageLoadTracked) {
        const loadTime = performance.now() - startTime;

        window.analytics.trackPerformanceEvent('page_load', loadTime, {
          pageTitle: pageTitle,
          pageType: 'clean_layout',
          documentReadyState: document.readyState,
          timestamp: Date.now()
        });

        pageLoadTracked = true;
      }
    });

    // Track Core Web Vitals using Performance Observer
    if ('PerformanceObserver' in window) {
      // Largest Contentful Paint (LCP)
      try {
        const lcpObserver = new PerformanceObserver((list) => {
          const entries = list.getEntries();
          const lastEntry = entries[entries.length - 1];

          window.analytics.trackPerformanceEvent('lcp', lastEntry.startTime, {
            pageTitle: pageTitle,
            pageType: 'clean_layout',
            elementType: lastEntry.element?.tagName || 'unknown',
            url: window.location.pathname
          });
        });
        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });
      } catch (error) {
        console.warn('[Performance] LCP tracking failed:', error);
      }

      // First Contentful Paint (FCP)
      try {
        const fcpObserver = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            if (entry.name === 'first-contentful-paint') {
              window.analytics.trackPerformanceEvent('fcp', entry.startTime, {
                pageTitle: pageTitle,
                pageType: 'clean_layout',
                url: window.location.pathname
              });
            }
          }
        });
        fcpObserver.observe({ entryTypes: ['paint'] });
      } catch (error) {
        console.warn('[Performance] FCP tracking failed:', error);
      }

      // Cumulative Layout Shift (CLS)
      try {
        let clsValue = 0;
        const clsObserver = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            if (!entry.hadRecentInput) {
              clsValue += entry.value;
            }
          }

          // Track CLS periodically
          window.analytics.trackPerformanceEvent('cls', clsValue, {
            pageTitle: pageTitle,
            pageType: 'clean_layout',
            url: window.location.pathname,
            accumulated: true
          });
        });
        clsObserver.observe({ entryTypes: ['layout-shift'] });
      } catch (error) {
        console.warn('[Performance] CLS tracking failed:', error);
      }

      // First Input Delay (FID)
      try {
        const fidObserver = new PerformanceObserver((list) => {
          for (const entry of list.getEntries()) {
            window.analytics.trackPerformanceEvent('fid', entry.processingStart - entry.startTime, {
              pageTitle: pageTitle,
              pageType: 'clean_layout',
              eventType: entry.name,
              url: window.location.pathname
            });
          }
        });
        fidObserver.observe({ entryTypes: ['first-input'] });
      } catch (error) {
        console.warn('[Performance] FID tracking failed:', error);
      }
    }

    // Track navigation timing metrics
    if (performance.timing) {
      window.addEventListener('load', () => {
        setTimeout(() => {
          const timing = performance.timing;
          const navigationStart = timing.navigationStart;

          // DNS Lookup Time
          const dnsTime = timing.domainLookupEnd - timing.domainLookupStart;
          if (dnsTime > 0) {
            window.analytics.trackPerformanceEvent('dns_lookup', dnsTime, {
              pageTitle: pageTitle,
              pageType: 'clean_layout'
            });
          }

          // Connection Time
          const connectionTime = timing.connectEnd - timing.connectStart;
          if (connectionTime > 0) {
            window.analytics.trackPerformanceEvent('connection_time', connectionTime, {
              pageTitle: pageTitle,
              pageType: 'clean_layout'
            });
          }

          // Server Response Time
          const responseTime = timing.responseStart - timing.requestStart;
          if (responseTime > 0) {
            window.analytics.trackPerformanceEvent('server_response', responseTime, {
              pageTitle: pageTitle,
              pageType: 'clean_layout'
            });
          }

          // DOM Content Loaded
          const domContentLoaded = timing.domContentLoadedEventEnd - navigationStart;
          if (domContentLoaded > 0) {
            window.analytics.trackPerformanceEvent('dom_content_loaded', domContentLoaded, {
              pageTitle: pageTitle,
              pageType: 'clean_layout'
            });
          }

          // Full Page Load
          const fullPageLoad = timing.loadEventEnd - navigationStart;
          if (fullPageLoad > 0) {
            window.analytics.trackPerformanceEvent('full_page_load', fullPageLoad, {
              pageTitle: pageTitle,
              pageType: 'clean_layout'
            });
          }
        }, 100);
      });
    }

    // Track resource loading performance
    if (performance.getEntriesByType) {
      window.addEventListener('load', () => {
        setTimeout(() => {
          const resources = performance.getEntriesByType('resource');

          // Track critical resource timings
          resources.forEach(resource => {
            if (resource.name.includes('.css') || resource.name.includes('.js') || resource.name.includes('font')) {
              const resourceType = resource.name.includes('.css') ? 'css' :
                                 resource.name.includes('.js') ? 'javascript' :
                                 resource.name.includes('font') ? 'font' : 'other';

              window.analytics.trackPerformanceEvent('resource_load', resource.duration, {
                pageTitle: pageTitle,
                pageType: 'clean_layout',
                resourceType: resourceType,
                resourceSize: resource.transferSize || 0,
                cached: resource.transferSize === 0 && resource.decodedBodySize > 0
              });
            }
          });
        }, 200);
      });
    }

    // Track memory usage (if available)
    if (performance.memory) {
      window.analytics.trackPerformanceEvent('memory_usage', performance.memory.usedJSHeapSize, {
        pageTitle: pageTitle,
        pageType: 'clean_layout',
        totalHeapSize: performance.memory.totalJSHeapSize,
        heapSizeLimit: performance.memory.jsHeapSizeLimit
      });
    }

    // Track viewport and device performance context
    window.analytics.trackPerformanceEvent('viewport_context', 0, {
      pageTitle: pageTitle,
      pageType: 'clean_layout',
      viewportWidth: window.innerWidth,
      viewportHeight: window.innerHeight,
      devicePixelRatio: window.devicePixelRatio || 1,
      connectionType: navigator.connection?.effectiveType || 'unknown',
      hardwareConcurrency: navigator.hardwareConcurrency || 0
    });

    // Track performance budget violations
    const performanceBudgets = {
      lcp: 2500,  // 2.5s
      fcp: 1800,  // 1.8s
      fid: 100,   // 100ms
      cls: 0.1    // 0.1 score
    };

    // Monitor for budget violations
    window.addEventListener('load', () => {
      setTimeout(() => {
        // Check if any metrics exceeded budgets
        const budgetViolations = [];

        // This would be enhanced with actual metric collection
        window.analytics.trackPerformanceEvent('performance_budget_check', 0, {
          pageTitle: pageTitle,
          pageType: 'clean_layout',
          budgets: performanceBudgets,
          violations: budgetViolations.length,
          timestamp: Date.now()
        });
      }, 3000);
    });

    console.log('[Analytics] Performance monitoring initialized for CleanLayout');
  }

  // Initialize performance monitoring when DOM is ready
  initializePerformanceMonitoring();

  // Also listen for analytics ready event
  window.addEventListener('analyticsReady', initializePerformanceMonitoring);
});
</script>

<style>
  :root {
    --accent-cyan: #00ffff;
    --accent-purple: #9f40ff;
    --accent-pink: #ff00ff;
  }
  
  /* Dark theme (default) */
  .dark-theme {
    color-scheme: dark;
  }
  
  /* Light theme handled by comprehensive theme.css */
  
  /* Smooth transitions between themes */
  body, nav, footer {
    transition: all 0.3s ease;
  }
</style>