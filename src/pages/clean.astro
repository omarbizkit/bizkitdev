---
import CleanLayout from '../layouts/CleanLayout.astro';
import ModernHero from '../components/ModernHero.astro';
---

<CleanLayout>
  <ModernHero />
  
  <!-- Work Section -->
  <section id="work" class="py-20 relative">
    <div class="max-w-7xl mx-auto px-6">
      <div class="text-center mb-16">
        <h2 class="text-4xl md:text-5xl font-bold mb-6">
          <span class="bg-gradient-to-r from-cyan-400 to-purple-500 bg-clip-text text-transparent">
            Featured Work
          </span>
        </h2>
        <p class="text-xl text-gray-400 max-w-2xl mx-auto">
          A selection of projects showcasing expertise in data science, machine learning, and AI development.
        </p>
      </div>
      
      <!-- Project Grid -->
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        <!-- Project Card 1 -->
        <div class="group bg-gray-900/50 backdrop-blur-sm border border-gray-800 rounded-xl p-6 hover:border-cyan-400/50 transition-all duration-300 hover:shadow-lg hover:shadow-cyan-500/10">
          <div class="aspect-video bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-lg mb-4 flex items-center justify-center">
            <span class="text-4xl">ü§ñ</span>
          </div>
          <h3 class="text-xl font-semibold mb-2 text-white">AI Trading System</h3>
          <p class="text-gray-400 mb-4">Machine learning model for automated cryptocurrency trading with 85% accuracy.</p>
          <div class="flex flex-wrap gap-2 mb-4">
            <span class="px-2 py-1 bg-cyan-500/20 text-cyan-400 text-sm rounded">Python</span>
            <span class="px-2 py-1 bg-purple-500/20 text-purple-400 text-sm rounded">TensorFlow</span>
            <span class="px-2 py-1 bg-pink-500/20 text-pink-400 text-sm rounded">Crypto</span>
          </div>
          <a href="#" class="text-cyan-400 hover:text-cyan-300 font-medium group-hover:underline">
            View Project ‚Üí
          </a>
        </div>
        
        <!-- Project Card 2 -->
        <div class="group bg-gray-900/50 backdrop-blur-sm border border-gray-800 rounded-xl p-6 hover:border-purple-400/50 transition-all duration-300 hover:shadow-lg hover:shadow-purple-500/10">
          <div class="aspect-video bg-gradient-to-br from-green-500/20 to-blue-500/20 rounded-lg mb-4 flex items-center justify-center">
            <span class="text-4xl">üìä</span>
          </div>
          <h3 class="text-xl font-semibold mb-2 text-white">Data Visualization Platform</h3>
          <p class="text-gray-400 mb-4">Interactive dashboard for real-time analytics and business intelligence.</p>
          <div class="flex flex-wrap gap-2 mb-4">
            <span class="px-2 py-1 bg-green-500/20 text-green-400 text-sm rounded">React</span>
            <span class="px-2 py-1 bg-blue-500/20 text-blue-400 text-sm rounded">D3.js</span>
            <span class="px-2 py-1 bg-yellow-500/20 text-yellow-400 text-sm rounded">Node.js</span>
          </div>
          <a href="#" class="text-purple-400 hover:text-purple-300 font-medium group-hover:underline">
            View Project ‚Üí
          </a>
        </div>
        
        <!-- Project Card 3 -->
        <div class="group bg-gray-900/50 backdrop-blur-sm border border-gray-800 rounded-xl p-6 hover:border-pink-400/50 transition-all duration-300 hover:shadow-lg hover:shadow-pink-500/10">
          <div class="aspect-video bg-gradient-to-br from-red-500/20 to-pink-500/20 rounded-lg mb-4 flex items-center justify-center">
            <span class="text-4xl">üß†</span>
          </div>
          <h3 class="text-xl font-semibold mb-2 text-white">Neural Network Framework</h3>
          <p class="text-gray-400 mb-4">Custom deep learning framework optimized for computer vision tasks.</p>
          <div class="flex flex-wrap gap-2 mb-4">
            <span class="px-2 py-1 bg-red-500/20 text-red-400 text-sm rounded">C++</span>
            <span class="px-2 py-1 bg-pink-500/20 text-pink-400 text-sm rounded">CUDA</span>
            <span class="px-2 py-1 bg-orange-500/20 text-orange-400 text-sm rounded">OpenCV</span>
          </div>
          <a href="#" class="text-pink-400 hover:text-pink-300 font-medium group-hover:underline">
            View Project ‚Üí
          </a>
        </div>
      </div>
      
      <div class="text-center mt-12">
        <a href="#" class="inline-flex items-center px-6 py-3 border border-gray-600 rounded-lg text-gray-300 hover:border-cyan-400 hover:text-cyan-400 transition-colors">
          Load More Projects
          <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </a>
      </div>
    </div>
  </section>
  
  <!-- About Section -->
  <section id="about" class="py-20 relative">
    <div class="max-w-7xl mx-auto px-6">
      <div class="grid lg:grid-cols-2 gap-12 items-center">
        <div>
          <h2 class="text-4xl md:text-5xl font-bold mb-6">
            <span class="bg-gradient-to-r from-cyan-400 to-purple-500 bg-clip-text text-transparent">
              About Me
            </span>
          </h2>
          <p class="text-xl text-gray-300 mb-6 leading-relaxed">
            I'm Omar Torres, a passionate Data & AI Enthusiast dedicated to transforming complex data into intelligent solutions that drive real-world impact.
          </p>
          <p class="text-gray-400 mb-8 leading-relaxed">
            With expertise in machine learning, data visualization, and artificial intelligence, I help businesses leverage their data to make informed decisions and create innovative products.
          </p>
          
          <div class="grid grid-cols-2 md:grid-cols-3 gap-6 mb-8">
            <div class="bg-gray-900/50 backdrop-blur-sm border border-gray-800 rounded-lg p-4">
              <div class="text-2xl font-bold text-cyan-400 mb-1">5+</div>
              <div class="text-sm text-gray-400">Years Experience</div>
            </div>
            <div class="bg-gray-900/50 backdrop-blur-sm border border-gray-800 rounded-lg p-4">
              <div class="flex items-center gap-2 mb-1">
                <span class="text-green-400">„Äà/„Äâ</span>
                <span id="lines-counter" class="text-2xl font-bold text-green-400">0</span>
              </div>
              <div class="text-sm text-gray-400">Lines of Code Today</div>
            </div>
            <div class="bg-gray-900/50 backdrop-blur-sm border border-gray-800 rounded-lg p-4">
              <div class="text-2xl font-bold text-pink-400 mb-1">100%</div>
              <div class="text-sm text-gray-400">Client Satisfaction</div>
            </div>
            <div class="bg-gray-900/50 backdrop-blur-sm border border-gray-800 rounded-lg p-4">
              <div class="flex items-center gap-2 mb-2">
                <img src="/assets/icons/chemex.png" alt="Chemex" class="w-5 h-5" />
                <span id="coffee-amount" class="text-xl font-bold text-amber-400">0.0g</span>
              </div>
              <div class="mb-2">
                <div class="w-full bg-gray-700 rounded-full h-2">
                  <div id="coffee-progress" class="bg-gradient-to-r from-amber-500 to-orange-500 h-2 rounded-full transition-all duration-1000" style="width: 0%"></div>
                </div>
              </div>
              <div class="text-xs text-gray-400">Coffee Consumed Today</div>
            </div>
            <div class="bg-gray-900/50 backdrop-blur-sm border border-gray-800 rounded-lg p-4">
              <div class="flex items-center gap-2 mb-1">
                <span class="text-orange-400">üöÄ</span>
                <span id="commits-counter" class="text-2xl font-bold text-orange-400">0</span>
              </div>
              <div class="text-sm text-gray-400">Commits Today</div>
            </div>
            <div class="bg-gray-900/50 backdrop-blur-sm border border-gray-800 rounded-lg p-4">
              <div class="flex items-center gap-2 mb-1">
                <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                <span id="uptime-counter" class="text-xl font-bold text-blue-400">00:00:00</span>
              </div>
              <div class="text-sm text-gray-400">System Uptime</div>
            </div>
          </div>
          
          <a href="#contact" class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-cyan-500 to-purple-600 rounded-lg font-semibold text-white hover:from-cyan-400 hover:to-purple-500 transition-all duration-300 hover:shadow-lg hover:shadow-cyan-500/25">
            Let's Work Together
          </a>
        </div>
        
        <div class="flex justify-center">
          <div class="relative">
            <div class="w-80 h-80 bg-gradient-to-br from-cyan-500/20 to-purple-500/20 rounded-full blur-3xl"></div>
            <div class="absolute inset-0 flex items-center justify-center">
              <div class="w-64 h-64 bg-gradient-to-br from-cyan-500 to-purple-600 rounded-full flex items-center justify-center text-6xl">
                üë®‚Äçüíª
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
  
  <!-- Contact Section -->
  <section id="contact" class="py-20 relative">
    <div class="max-w-4xl mx-auto px-6 text-center">
      <h2 class="text-4xl md:text-5xl font-bold mb-6">
        <span class="bg-gradient-to-r from-cyan-400 to-purple-500 bg-clip-text text-transparent">
          Let's Connect
        </span>
      </h2>
      <p class="text-xl text-gray-400 mb-12 max-w-2xl mx-auto">
        Ready to transform your data into intelligent solutions? Let's discuss how we can work together.
      </p>
      
      <div class="flex flex-col sm:flex-row gap-6 justify-center">
        <a href="mailto:omarbizkit@hotmail.com" class="inline-flex items-center px-8 py-4 bg-gradient-to-r from-cyan-500 to-purple-600 rounded-lg font-semibold text-white hover:from-cyan-400 hover:to-purple-500 transition-all duration-300 hover:shadow-lg hover:shadow-cyan-500/25">
          üìß Get In Touch
        </a>
        
        <a href="https://www.linkedin.com/in/msqldba/" target="_blank" class="inline-flex items-center px-8 py-4 border-2 border-gray-600 rounded-lg font-semibold text-gray-300 hover:border-cyan-400 hover:text-cyan-400 transition-all duration-300">
          üíº LinkedIn
        </a>
      </div>
    </div>
  </section>
</CleanLayout>

<style>
  /* Smooth scrolling for navigation */
  html {
    scroll-behavior: smooth;
  }
  
  /* Custom animations */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fadeInUp {
    animation: fadeInUp 0.8s ease-out;
  }
</style>

<script>
  function updateCoffeeConsumption() {
    // Get current time in MST (UTC-7)
    const now = new Date();
    const mstOffset = -7 * 60; // MST is UTC-7
    const utc = now.getTime() + (now.getTimezoneOffset() * 60000);
    const mstTime = new Date(utc + (mstOffset * 60000));
    
    const hours = mstTime.getHours();
    const minutes = mstTime.getMinutes();
    const currentTimeInMinutes = hours * 60 + minutes;
    
    // Coffee consumption schedule: 5 AM (300 min) to 12 PM (720 min)
    const startTime = 5 * 60; // 5 AM in minutes
    const endTime = 12 * 60;   // 12 PM in minutes
    const maxCoffee = 35.22;   // grams
    
    let consumedGrams = 0;
    let progressPercentage = 0;
    
    if (currentTimeInMinutes < startTime) {
      // Before 5 AM - no coffee consumed yet
      consumedGrams = 0;
      progressPercentage = 0;
    } else if (currentTimeInMinutes >= endTime) {
      // After 12 PM - full coffee consumption
      consumedGrams = maxCoffee;
      progressPercentage = 100;
    } else {
      // Between 5 AM and 12 PM - gradual consumption
      const elapsedMinutes = currentTimeInMinutes - startTime;
      const totalMinutes = endTime - startTime; // 7 hours = 420 minutes
      
      progressPercentage = (elapsedMinutes / totalMinutes) * 100;
      consumedGrams = (progressPercentage / 100) * maxCoffee;
    }
    
    // Update the display
    const amountElement = document.getElementById('coffee-amount');
    const progressElement = document.getElementById('coffee-progress');
    
    if (amountElement && progressElement) {
      amountElement.textContent = `${consumedGrams.toFixed(1)}g`;
      progressElement.style.width = `${progressPercentage}%`;
      
      // Add visual effects based on consumption level
      if (progressPercentage >= 75) {
        progressElement.className = 'bg-gradient-to-r from-orange-500 to-red-500 h-2 rounded-full transition-all duration-1000';
        amountElement.className = 'text-xl font-bold text-orange-400';
      } else if (progressPercentage >= 50) {
        progressElement.className = 'bg-gradient-to-r from-yellow-500 to-orange-500 h-2 rounded-full transition-all duration-1000';
        amountElement.className = 'text-xl font-bold text-yellow-400';
      } else {
        progressElement.className = 'bg-gradient-to-r from-amber-500 to-orange-500 h-2 rounded-full transition-all duration-1000';
        amountElement.className = 'text-xl font-bold text-amber-400';
      }
    }
  }
  
  // Update immediately and then every minute
  updateCoffeeConsumption();
  setInterval(updateCoffeeConsumption, 60000); // Update every minute

  // Lines of Code Counter
  let currentLinesCount = 0;
  
  function calculateCurrentLines() {
    // Get current time in MST (UTC-7)
    const now = new Date();
    const mstOffset = -7 * 60; // MST is UTC-7
    const utc = now.getTime() + (now.getTimezoneOffset() * 60000);
    const mstTime = new Date(utc + (mstOffset * 60000));
    
    const hours = mstTime.getHours();
    const minutes = mstTime.getMinutes();
    const currentTimeInMinutes = hours * 60 + minutes;
    
    // Coding schedule: 8 AM (480 min) to 5 PM (1020 min)
    const startTime = 8 * 60; // 8 AM in minutes
    const endTime = 17 * 60;  // 5 PM in minutes
    const maxLines = 800;     // lines per day
    
    if (currentTimeInMinutes < startTime) {
      // Before 8 AM - no lines written yet
      return 0;
    } else if (currentTimeInMinutes >= endTime) {
      // After 5 PM - full lines written
      return maxLines;
    } else {
      // Between 8 AM and 5 PM - gradual increase
      const elapsedMinutes = currentTimeInMinutes - startTime;
      const totalMinutes = endTime - startTime; // 9 hours = 540 minutes
      
      const progress = elapsedMinutes / totalMinutes;
      return Math.floor(progress * maxLines);
    }
  }
  
  function updateDisplay() {
    const linesElement = document.getElementById('lines-counter');
    if (linesElement) {
      linesElement.textContent = currentLinesCount.toLocaleString();
    }
  }
  
  // Initialize lines counter with current time-based value
  currentLinesCount = calculateCurrentLines();
  updateDisplay();
  
  // Update counter periodically
  setInterval(() => {
    currentLinesCount = calculateCurrentLines();
    updateDisplay();
  }, 30000); // Check every 30 seconds

  // Commits Today Counter
  function updateCommitsToday() {
    const commitsElement = document.getElementById('commits-counter');
    if (!commitsElement) return;
    
    // Get current time in MST for date calculation
    const now = new Date();
    const mstOffset = -7 * 60; // MST is UTC-7
    const utc = now.getTime() + (now.getTimezoneOffset() * 60000);
    const mstTime = new Date(utc + (mstOffset * 60000));
    
    const hours = mstTime.getHours();
    const minutes = mstTime.getMinutes();
    const currentTimeInMinutes = hours * 60 + minutes;
    
    // Simulate realistic commit patterns (6 AM - 11 PM)
    const workStart = 6 * 60; // 6 AM
    const workEnd = 23 * 60;   // 11 PM
    const maxCommits = 12;     // Max commits per day
    
    let commits = 0;
    if (currentTimeInMinutes >= workStart && currentTimeInMinutes <= workEnd) {
      // More commits during peak hours (9 AM - 6 PM)
      const peakStart = 9 * 60;
      const peakEnd = 18 * 60;
      
      if (currentTimeInMinutes >= peakStart && currentTimeInMinutes <= peakEnd) {
        // Peak hours: 60% of daily commits
        const peakProgress = (currentTimeInMinutes - peakStart) / (peakEnd - peakStart);
        commits = Math.floor(peakProgress * maxCommits * 0.6);
      }
      
      // Add gradual commits for non-peak hours
      const totalProgress = (currentTimeInMinutes - workStart) / (workEnd - workStart);
      commits += Math.floor(totalProgress * maxCommits * 0.4);
      
      // Add some realistic variation
      const dayOfYear = Math.floor((mstTime - new Date(mstTime.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24));
      const variation = Math.sin(dayOfYear * 0.1) * 2;
      commits = Math.max(0, Math.min(maxCommits, commits + Math.floor(variation)));
    }
    
    commitsElement.textContent = commits.toString();
  }
  
  // System Uptime Counter
  const startTime = Date.now();
  
  function updateUptime() {
    const uptimeElement = document.getElementById('uptime-counter');
    if (!uptimeElement) return;
    
    const currentTime = Date.now();
    const uptimeMs = currentTime - startTime;
    
    // Convert to hours, minutes, seconds
    const hours = Math.floor(uptimeMs / (1000 * 60 * 60));
    const minutes = Math.floor((uptimeMs % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((uptimeMs % (1000 * 60)) / 1000);
    
    // Format as HH:MM:SS
    const formattedTime = 
      `${hours.toString().padStart(2, '0')}:` +
      `${minutes.toString().padStart(2, '0')}:` +
      `${seconds.toString().padStart(2, '0')}`;
    
    uptimeElement.textContent = formattedTime;
  }
  
  // Initialize and update new counters
  updateCommitsToday();
  updateUptime();
  
  // Update commits every 5 minutes
  setInterval(updateCommitsToday, 5 * 60 * 1000);
  
  // Update uptime every second
  setInterval(updateUptime, 1000);
</script>