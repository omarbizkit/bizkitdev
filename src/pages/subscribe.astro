---
export const prerender = false;

import CleanLayout from '../layouts/CleanLayout.astro';

// Get email from URL parameters if redirected from homepage
const url = new URL(Astro.request.url);
const prefilledEmail = url.searchParams.get('email');
---

<CleanLayout title="Subscribe - Omar Torres">
  <div class="pt-24 pb-16">
    <div class="max-w-4xl mx-auto px-6">
      <div class="text-center mb-12">
        <h1 class="text-4xl md:text-6xl font-bold mb-6">
          <span class="bg-gradient-to-r from-cyan-400 to-purple-500 bg-clip-text text-transparent">
            Stay Connected
          </span>
        </h1>
        <p class="text-xl text-gray-400 max-w-2xl mx-auto">
          Get notified about new projects, insights, and updates from the world of data and AI.
        </p>

        {prefilledEmail && (
          <div class="mt-6 p-4 bg-cyan-500/20 border border-cyan-500/30 rounded-lg max-w-md mx-auto">
            <p class="text-cyan-300 text-sm">
              âœ… Your email is ready! Complete your subscription below.
            </p>
          </div>
        )}
      </div>

      <!-- Subscription Form -->
      <form
        data-testid="subscribe-form"
        action="/api/subscribe"
        method="POST"
        class={`bg-gray-900/50 backdrop-blur-sm border rounded-lg p-8 max-w-md mx-auto transition-all duration-500 ${prefilledEmail ? 'border-cyan-500/50 shadow-lg shadow-cyan-500/10 animate-pulse' : 'border-gray-800'}`}
      >
        <div class="text-center mb-6">
          <h3 class="text-xl font-semibold mb-2 text-white">Join the Community</h3>
          <p class="text-gray-400 text-sm">Get the latest updates delivered to your inbox</p>
        </div>

        <div class="space-y-4">
          <div>
            <label for="email" class="block text-sm font-medium text-gray-300 mb-2">
              Email Address
            </label>
            <input
              type="email"
              id="email"
              name="email"
              required
              placeholder="your.email@example.com"
              value={prefilledEmail || ""}
              class="input-cyber w-full px-4 py-3 rounded-lg"
              aria-label="Email address for subscription"
            />
            <div
              data-testid="email-error"
              class="text-red-400 text-sm mt-1 hidden"
            >
              Please enter a valid email address
            </div>
          </div>

          <button
            type="submit"
            class="w-full bg-gradient-to-r from-cyan-500 to-purple-600 hover:from-cyan-400 hover:to-purple-500 text-white font-semibold py-3 px-4 rounded-lg transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:ring-offset-2 focus:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed"
            aria-label="Subscribe to newsletter"
          >
            {prefilledEmail ? "Complete Subscription" : "Subscribe"}
          </button>

          <div
            data-testid="success-message"
            class="text-green-400 text-sm text-center hidden"
          >
            Thank you! Please check your email to confirm your subscription.
          </div>

          <div
            data-testid="error-message"
            class="text-red-400 text-sm text-center hidden"
          >
            Something went wrong. Please try again.
          </div>
        </div>

        <div class="mt-6 text-center text-xs text-gray-500">
          We respect your privacy. Unsubscribe at any time.
        </div>
      </form>
    </div>
  </div>
</CleanLayout>

<script>
// Form validation handling
function updateEmailValidation() {
  const emailInput = document.getElementById('email') as HTMLInputElement;
  const emailError = document.querySelector('[data-testid="email-error"]') as HTMLElement;

  if (!emailInput || !emailError) return;

  // Force validation update
  emailInput.setCustomValidity('');

  if (emailInput.checkValidity()) {
    emailError.classList.add('hidden');
  } else {
    emailError.classList.remove('hidden');
  }
}

const emailElement = document.getElementById('email');
if (emailElement) {
  emailElement.addEventListener('input', updateEmailValidation);
}

// Check validation on page load (important for prefilled emails)
document.addEventListener('DOMContentLoaded', function() {
  // Small delay to ensure prefilled values are set
  setTimeout(function() {
    updateEmailValidation();

    // Trigger validation on form reset (when email is prefilled)
    const emailInput = document.getElementById('email') as HTMLInputElement;
    if (emailInput && emailInput.value) {
      updateEmailValidation();
    }

    // Force initial validation regardless of prefilled state
    setTimeout(function() {
      const currentEmailInput = document.getElementById('email');
      if (currentEmailInput) {
        updateEmailValidation();
      }
    }, 500);
  }, 100);
});

async function handleSubscribe(event: Event) {
  event.preventDefault();

  const form = event.target as HTMLFormElement;
  if (!form) return;
  
  const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
  const emailInput = form.querySelector('#email') as HTMLInputElement;
  const successMessage = form.querySelector('[data-testid="success-message"]') as HTMLElement;
  const errorMessage = form.querySelector('[data-testid="error-message"]') as HTMLElement;

  // Disable form during submission
  submitButton.disabled = true;
  submitButton.textContent = 'Subscribing...';
  emailInput.disabled = true;

  // Hide previous messages
  successMessage.classList.add('hidden');
  errorMessage.classList.add('hidden');

  try {
    const formData = new FormData(form);
    const emailValue = formData.get('email');

    const response = await fetch(form.action, {
      method: form.method,
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: emailValue || emailInput.value || ''
      })
    });

    const data = await response.json();

    if (response.ok) {
      // Success - sanitize message to prevent XSS
      const sanitizedMessage = (data.message || 'Thank you! Please check your email to confirm your subscription.')
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#x27;');
      successMessage.textContent = sanitizedMessage;
      successMessage.classList.remove('hidden');
      form.reset();
    } else if (response.status === 429) {
      // Rate limit error - disable form temporarily
      const sanitizedMessage = (data.message || 'Too many requests. Please try again later.')
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#x27;');
      errorMessage.textContent = sanitizedMessage;
      errorMessage.classList.remove('hidden');

      // Disable form for rate limiting
      submitButton.disabled = true;
      emailInput.disabled = true;
      submitButton.textContent = 'Temporarily Disabled';

      // Re-enable after 30 seconds
      setTimeout(() => {
        submitButton.disabled = false;
        emailInput.disabled = false;
        submitButton.textContent = 'Subscribe';
        errorMessage.classList.add('hidden');
      }, 30000);

    } else {
      // Error - sanitize message to prevent XSS
      const sanitizedMessage = (data.message || 'Something went wrong. Please try again.')
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#x27;');
      errorMessage.textContent = sanitizedMessage;
      errorMessage.classList.remove('hidden');
    }
  } catch (error) {
    console.error('Subscription error:', error);
    errorMessage.textContent = 'Network error. Please try again.';
    errorMessage.classList.remove('hidden');
  } finally {
    // Re-enable form only if not successful
    if (!successMessage.classList.contains('hidden')) {
      // Keep form disabled on success
      return;
    }

    submitButton.disabled = false;
    submitButton.textContent = 'Subscribe';
    emailInput.disabled = false;
  }
}

// Check validation on page load (important for prefilled emails)
document.addEventListener('DOMContentLoaded', function() {
  // Small delay to ensure prefilled values are set
  setTimeout(function() {
    updateEmailValidation();

    // Force initial validation regardless of prefilled state
    setTimeout(function() {
      const formField = document.getElementById('email');
      if (formField) {
        updateEmailValidation();
      }
    }, 500);
  }, 100);
});

// Attach event listener to form
document.addEventListener('DOMContentLoaded', function() {
  const subscriptionForm = document.querySelector('[data-testid="subscribe-form"]');
  if (subscriptionForm) {
    subscriptionForm.addEventListener('submit', handleSubscribe);
  }
});
</script>

<style>
  /* Form validation styles */
  input:invalid {
    border-color: #ef4444;
  }

  input:valid {
    border-color: #10b981;
  }

  /* Error message visibility is controlled by JavaScript to avoid conflicts */
</style>